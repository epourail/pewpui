version: '3.8'

# --------------------------------------------------------------------------------
# Services
# --------------------------------------------------------------------------------
services:

  # Cache
  # -----------------------------------------------------------------------------
  cache:
    container_name: cache
    image: redis:7.0-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - back

  # Database
  # -----------------------------------------------------------------------------
  database:
    container_name: database
    image: mariadb:11.0.2
    restart: always
    volumes:
    - ./configuration/database/my.cnf:/etc/mysql/mariadb.conf.d/my.cnf:ro
    - ./configuration/database/schema.sql:/docker-entrypoint-initdb.d/1.sql
    - db_data:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: s€cr€t
    healthcheck:
      test:  ["CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
    - back

  directus:
    container_name: directus.local
    image: directus/directus:10.4
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
      keycloak:
        condition: service_healthy        
#    volumes:
#      - ./uploads:/directus/uploads
#      - ./extensions:/directus/extensions
    ports:
      - "8055:${CMS_DIRECTUS_PORT}"
    environment:
      KEY: 255d861b-5ea1-5996-9aa3-922530ec40b1
      SECRET: 6116487b-cda1-52c2-b5b5-c8022c45e263

      PUBLIC_URL: ${CMS_DIRECTUS_PUBLIC_URL}
      ADMIN_EMAIL: ${CMS_DIRECTUS_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${CMS_DIRECTUS_ADMIN_PASSWORD}
      #CONTENT_SECURITY_POLICY_DIRECTIVES__IMG_SRC: '*'
      LOG_LEVEL: info
      # Database
      DB_CLIENT: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DIRECTUS_DATABASE}
      DB_USER: ${DB_DIRECTUS_USERNAME}
      DB_PASSWORD: ${DB_DIRECTUS_PASSWORD}
      # Cache
      CACHE_ENABLED: 'true'
      CACHE_STORE: redis
      REDIS: redis://${CACHE_HOST}:${CACHE_PORT}/4
      CACHE_AUTO_PURGE: 'true'
      # OAuth
      AUTH_PROVIDERS: keycloak
      AUTH_KEYCLOAK_DRIVER: openid
      AUTH_KEYCLOAK_CLIENT_ID: ${IDP_KEYCLOAK_CLIENT_ID}
      AUTH_KEYCLOAK_CLIENT_SECRET: ${IDP_KEYCLOAK_CLIENT_SECRET}
      AUTH_KEYCLOAK_ISSUER_URL: ${IDP_KEYCLOAK_WELLKNOWN_URL}
      AUTH_KEYCLOAK_PROFILE_URL: ${IDP_KEYCLOAK_WELLKNOWN_URL}
      AUTH_KEYCLOAK_IDENTIFIER_KEY: email
      AUTH_KEYCLOAK_ALLOW_PUBLIC_REGISTRATION: 'true'
      AUTH_KEYCLOAK_SCOPE: ${IDP_KEYCLOAK_SCOPE}
      AUTH_KEYCLOAK_DEFAULT_ROLE_ID: ${IDP_KEYCLOAK_DEFAULT_ROLE_ID}
    networks:
    - front
    - back

  # Keycloak
  # -----------------------------------------------------------------------------
  keycloak:
    container_name: keycloak.local
    image: quay.io/keycloak/keycloak:21.1
    volumes:
    - ./configuration/keycloak/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    depends_on:
      database:
        condition: service_healthy
    ports:
    - 8056:${IDP_KEYCLOAK_PORT}
    command: "start --http-enabled=true --hostname-strict=false"
    environment:
      KEYCLOAK_ADMIN: ${IDP_KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${IDP_KEYCLOAK_ADMIN_PASSWORD}
      # Keycloak
      KC_LOG_LEVEL: info
      KC_HTTP_PORT: ${IDP_KEYCLOAK_PORT}
      KC_HEALTH_ENABLED: 'true'
      # Database
      KC_DB: mariadb
      KC_DB_URL_HOST: ${DB_HOST}
      KC_DB_URL_PORT: ${DB_PORT}
      KC_DB_URL_DATABASE: ${DB_KEYCLOAK_DATABASE}
      KC_DB_USERNAME: ${DB_KEYCLOAK_USERNAME}
      KC_DB_PASSWORD: ${DB_KEYCLOAK_PASSWORD}
    healthcheck:
      test: "healthcheck.sh ${IDP_KEYCLOAK_HOST} ${IDP_KEYCLOAK_PORT}"
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
    - front
    - back

  # Tools: adminer
  # -----------------------------------------------------------------------------
  adminer:
    container_name: adminer
    image: adminer:4.7
    environment:
      ADMINER_DESIGN: mvt
      ADMINER_DEFAULT_SERVER: ${DB_HOST}
    depends_on:
      database:
        condition: service_healthy
    ports: 
    - 8099:8080
    networks:
    - back
    - front

# --------------------------------------------------------------------------------
# Networks
# --------------------------------------------------------------------------------
networks: 
  back: {}
  front: {}

# --------------------------------------------------------------------------------
# Volumes
# --------------------------------------------------------------------------------
volumes:
  db_data: