version: '3.8'

# --------------------------------------------------------------------------------
# Services
# --------------------------------------------------------------------------------
services:

  # Gateway (Kong)
  # -----------------------------------------------------------------------------
  kong:
    container_name: gateway
    image: kong:3.3
    environment:
      KONG_LOG_LEVEL: debug
      KONG_DATABASE: "off"
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_TRUSTED_IPS: '0.0.0.0/0,::/0'
      KONG_SSL_CERT: /ssl/kong.crt
      KONG_SSL_CERT_KEY: /ssl/kong.key
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3      
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    volumes:
      - ./configuration/kong:/etc/kong:ro
      - ./configuration/kong/certs:/ssl:ro
    networks:
      - back
      - front

  # Cache (Redis)
  # -----------------------------------------------------------------------------
  cache:
    container_name: cache
    image: redis:7.0-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
    - back

  # Database (MariaDb)
  # -----------------------------------------------------------------------------
  database:
    container_name: database
    image: mariadb:11.0.2
    restart: always
    volumes:
    - ./configuration/database/my.cnf:/etc/mysql/mariadb.conf.d/my.cnf:ro
    - ./configuration/database/schema.sql:/docker-entrypoint-initdb.d/1.sql
    - db_data:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: s€cr€t
    healthcheck:
      test:  ["CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
    - back

  # CMS (Directus)
  # -----------------------------------------------------------------------------
  directus:
    container_name: directus
    image: directus/directus:10.5
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    volumes:
    - ./configuration/directus/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
#      - ./uploads:/directus/uploads
    - ./configuration/directus/extensions/migrations:/directus/extensions/migrations
    environment:
      # General
      PUBLIC_URL: ${CMS_DIRECTUS_PUBLIC_URL}
      LOG_LEVEL: debug
      # Default role
      CMS_DIRECTUS_DEFAULT_ROLE_ID: ${CMS_DIRECTUS_DEFAULT_ROLE_ID}
      CMS_DIRECTUS_DEFAULT_ROLE_NAME: ${CMS_DIRECTUS_DEFAULT_ROLE_NAME}
      # Security
      KEY: dcaf1e72-e051-4931-bd36-a61dcd6f73ca
      SECRET: a002c287-3880-4b51-bc40-21c82676c98a
      # Admin Account
      ADMIN_EMAIL: ${CMS_DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${CMS_DIRECTUS_ADMIN_PASSWORD}
      # Database
      DB_CLIENT: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DIRECTUS_DATABASE}
      DB_USER: ${DB_DIRECTUS_USERNAME}
      DB_PASSWORD: ${DB_DIRECTUS_PASSWORD}
      # Cache
      CACHE_ENABLED: 'true'
      CACHE_AUTO_PURGE: 'true'
      CACHE_STORE: redis
      REDIS: redis://${CACHE_HOST}:${CACHE_PORT}/4
      # Authentication
      AUTH_DISABLE_DEFAULT: 'false'
      AUTH_PROVIDERS: keycloak
      AUTH_KEYCLOAK_DRIVER: openid
      AUTH_KEYCLOAK_CLIENT_ID: ${IDP_KEYCLOAK_CLIENT_ID}
      AUTH_KEYCLOAK_CLIENT_SECRET: ${IDP_KEYCLOAK_CLIENT_SECRET}
      AUTH_KEYCLOAK_SCOPE: ${IDP_KEYCLOAK_SCOPE}
      AUTH_KEYCLOAK_ISSUER_URL: ${IDP_KEYCLOAK_WELLKNOWN_URL}
      AUTH_KEYCLOAK_IDENTIFIER_KEY: email
      AUTH_KEYCLOAK_ALLOW_PUBLIC_REGISTRATION: 'true'
      AUTH_KEYCLOAK_DEFAULT_ROLE_ID: ${CMS_DIRECTUS_DEFAULT_ROLE_ID}
      # Proxy
      ROOT_REDIRECT: "/cms/admin"
    healthcheck:
      test: ['CMD', 'healthcheck.sh', 'directus', '8055']
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
    - front
    - back

  # IDP (Keycloak)
  # -----------------------------------------------------------------------------
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0
    depends_on:
      database:
        condition: service_healthy
    command: "start --http-enabled=true --import-realm"
    volumes:
    - ./configuration/keycloak/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    - ./configuration/keycloak/realm:/opt/keycloak/data/import
    environment:
      # Admin Account
      KEYCLOAK_ADMIN: ${IDP_KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${IDP_KEYCLOAK_ADMIN_PASSWORD}
      # Logging
      KC_LOG_LEVEL: debug
      # Health
      KC_HEALTH_ENABLED: 'true'
      # Proxy
      KC_PROXY: edge
      PROXY_ADDRESS_FORWARDING: 'true'
      # Hostname
      KC_HOSTNAME_ADMIN_URL: ${IDP_KEYCLOAK_HOSTNAME_ADMIN_URL}
      KC_HOSTNAME_URL: ${IDP_KEYCLOAK_HOSTNAME_URL}
      # Database
      KC_DB: mariadb
      KC_DB_URL_HOST: ${DB_HOST}
      KC_DB_URL_PORT: ${DB_PORT}
      KC_DB_URL_DATABASE: ${DB_KEYCLOAK_DATABASE}
      KC_DB_USERNAME: ${DB_KEYCLOAK_USERNAME}
      KC_DB_PASSWORD: ${DB_KEYCLOAK_PASSWORD}
    healthcheck:
      test: ['CMD', 'healthcheck.sh', 'keycloak', '8080']
      interval: 20s
      timeout: 5s
      retries: 10
    networks:
    - front
    - back

  # Tools: adminer
  # -----------------------------------------------------------------------------
  adminer:
    container_name: adminer
    image: adminer:4.8.1
    environment:
      ADMINER_DESIGN: mvt
      ADMINER_DEFAULT_SERVER: ${DB_HOST}
    depends_on:
      database:
        condition: service_healthy
    networks:
    - back
    - front

# --------------------------------------------------------------------------------
# Networks
# --------------------------------------------------------------------------------
networks: 
  back: {}
  front: {}

# --------------------------------------------------------------------------------
# Volumes
# --------------------------------------------------------------------------------
volumes:
  db_data: